% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/tuneRF2.R
\name{tuneRF2}
\alias{tuneRF}
\alias{tuneRF2}
\title{the tuneRF function of randomForest after correcting for error relating to
errorOld=0}
\usage{
tuneRF2(x, y, mtryStart = if (is.factor(y)) floor(sqrt(ncol(x))) else
  floor(ncol(x)/3), ntreeTry = 50, stepFactor = 2, improve = 0.05,
  trace = TRUE, plot = FALSE, doBest = FALSE, ...)
}
\arguments{
\item{x}{See \code{\link{tuneRF}} in the package
  \code{randomForest} for details.}

\item{y}{See \code{\link{tuneRF}} in the package
  \code{randomForest} for details.}

\item{mtryStart}{See \code{\link{tuneRF}} in the package
  \code{randomForest} for details.}

\item{ntreeTry}{See \code{\link{tuneRF}} in the package
  \code{randomForest} for details.}

\item{stepFactor}{See \code{\link{tuneRF}} in the package
  \code{randomForest} for details.}

\item{improve}{See \code{\link{tuneRF}} in the package
  \code{randomForest} for details.}

\item{trace}{See \code{\link{tuneRF}} in the package
  \code{randomForest} for details.}

\item{plot}{See \code{\link{tuneRF}} in the package
  \code{randomForest} for details.}

\item{doBest}{See \code{\link{tuneRF}} in the package
  \code{randomForest} for details.}

\item{\dots}{Optional parameters to be passed to low level functions.}
}
\value{
See \code{\link{tuneRF}} in the package \code{randomForest} for
  details.
}
\description{
The \code{\link{tuneRF}} function of the \code{randomForest} package may
return an error when \code{errorOld} reaches 0 when exploring \code{mtry}.
This function returns the \code{mtry} reached before the error. In addition,
the default option for \code{"plot"} in \code{tuneRF} is changes to
\code{FALSE}.
}
\examples{
data(OliveOilHie)
set.seed(250)
# note the "error in if (Improve > improve)..."
# further note the OOB error=0\% and the 'Nan' in the printed info from tuneRF
# don't run
# hie.RF.OO <- RunHRF(train.data        = OliveOilHie,
#                     case.ID           = "case.ID",
#                     hie.levels        = c(2:4),
#                     mtry              = "tuneRF",
#                     internal.end.path = TRUE)

hie.RF.OO <- RunHRF(train.data        = OliveOilHie,
                    case.ID           = "case.ID",
                    hie.levels        = c(2:4),
                    mtry              = "tuneRF2",
                    internal.end.path = TRUE)
}

