% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/plot.HRF.R
\name{plot.HRF}
\alias{plot.HRF}
\title{Plot the Hierarchical class structure}
\usage{
\method{plot}{HRF}(x, rect.width = 0.8, rect.hieght = 0.5,
  text.size = 7.5, text.angle = 0, split.text = 6, int.col = "white",
  term.col = "gray80", root.col = "gray50",
  Y.title = "Hierarchical Level\\n", label.nodes = TRUE,
  label.classifiers = TRUE, class.ID.rect.col = "black",
  class.ID.rect.fill = "gold", class.ID.rect.linetype = "dotted",
  class.ID.rect.hieght.scale = 0.25, class.ID.text.size.scale = 0.8,
  class.ID.text.color = "black", ...)
}
\arguments{
\item{x}{Object of class \code{"HRF"} - the output
  of \code{RunHRF}.}

\item{rect.width}{Numeric, the width of boxes for each node,
  at width=1, the boxes overlap.}

\item{rect.hieght}{Numeric, the height of the boxes for each
  node, centre to centre distance betwen levels is 1.}

\item{text.size}{Numeric, a scaling number for the size of
  text.}

\item{text.angle}{Numeric, the angle of the text of the
  nodes.}

\item{split.text}{Numeric, the number of characters in nodes
  names above which the text is broken to two lines.}

\item{int.col}{Character, specifying the color of the
  fill of the internal nodes.}

\item{term.col}{Character, specifying the color of the
  fill of the terminal nodes.}

\item{root.col}{Character, specifying the color of the
  fill of the \code{tree.root} node.}

\item{Y.title}{Character, title of the y axis}

\item{label.nodes}{Logical, if \code{TRUE} (default), the
  nodes are labelled.}

\item{label.classifiers}{Logical, if \code{TRUE} (default), the
  local classifiers are labelled.}

\item{class.ID.rect.col}{Character, specifying the border color of
  the classifer.ID boxes.}

\item{class.ID.rect.fill}{Character, specifying the fill color of
  the classifer.ID boxes.}

\item{class.ID.rect.linetype}{Character, specifying the linetype of the
  classifer.ID boxes.}

\item{class.ID.rect.hieght.scale}{Numeric, the scaling of the classifer.ID
  box relative to the nodes boxe.}

\item{class.ID.text.size.scale}{Numeric, the scaling of the classifer.ID
  text relative to the nodes text}

\item{class.ID.text.color}{Character, specifying the color of the
  text for the classifer.ID.}

\item{\dots}{Optional parameters to be passed to the low level functions.}
}
\value{
The function returns a plot. If the function is saved to a new
   object, that the plot can be accessed and further edited using $plot on
   the new object (see examples for details).
}
\description{
This function takes as input an object of class \code{"HRF"}, and plots the
structure of the class hierarchy.
}
\details{
Based on \code{\link{ggplot2}}, the function plots the class
  hierarchy along with the local classifiers.
}
\examples{
# create random HRF data
set.seed(354)
random.hRF <- RandomHRF(num.term.nodes = 20, tree.depth = 4)
train.data <- random.hRF$train.data
# run HRF
hie.RF.random <- RunHRF(train.data = train.data,
                        case.ID    = "case.ID",
                        hie.levels = c(2:(random.hRF$call$tree.depth + 1)))

# S3 method for plot
plot.hie.RF.random <- plot(hie.RF.random)

# further editing of the plot with ggplot2
plot.hRF.tree.ran <- plot.hie.RF.random$plot
class(plot.hRF.tree.ran)
plot.hRF.tree.ran <- plot.hRF.tree.ran +
   ggtitle("The Class Hierarchy, internal and
            terminal nodes and all local classifiers")
plot.hRF.tree.ran <- plot.hRF.tree.ran +
                     theme(plot.title   = element_text(lineheight=.8,
                                                       face="bold",
                                                       color="red"))
plot.hRF.tree.ran <- plot.hRF.tree.ran +
                     theme(axis.title.y = element_text(size = 20,
                                                       colour="blue"))
plot.hRF.tree.ran
# the plot uses the following coordinates:
# x runs from 1 to the number of terminal nodes + 1
# y runs from 1 to the number of levels in the class hierarchy + 1
plot.hRF.tree.ran <- plot.hRF.tree.ran +
                     geom_text(data=NULL,
                               aes(x     = 1,
                                   y     = random.hRF$call$tree.depth + 1,
                                   label = "Top-\\nLeft"),
                               size = 5,
                               color = "magenta")
plot.hRF.tree.ran <- plot.hRF.tree.ran +
                     geom_text(data=NULL,
                               aes(x     = 1,
                                   y     = 1,
                                   label = "Bottom-\\nLeft"),
                               size = 5,
                               color = "magenta")
plot.hRF.tree.ran <- plot.hRF.tree.ran +
                     geom_text(data=NULL,
                               aes(x = random.hRF$call$num.term.nodes + 1,
                                   y = random.hRF$call$tree.depth + 1,
                                   label = "Top-\\nRight"),
                               size = 5,
                               color = "magenta")
plot.hRF.tree.ran <- plot.hRF.tree.ran +
                     geom_text(data=NULL,
                               aes(x = random.hRF$call$num.term.nodes + 1,
                                   y = 1,
                                   label = "Bottom-\\nRight"),
                               size = 5,
                               color = "magenta")
plot.hRF.tree.ran

################
#example with a the OliveOilHie dataset
data(OliveOilHie)
hie.RF.OO <- RunHRF(train.data        = OliveOilHie,
                    case.ID           = "case.ID",
                    hie.levels        = c(2:4),
                    mtry              = "tuneRF2",
                    internal.end.path = TRUE,
                    ntree=20)

plot(x          = hie.RF.OO,
     text.size  = 9,
     split.text = 10)
}
\author{
Yoni Gavish <gavishyoni@gmail.com>
}
\seealso{
\code{\link{RunHRF}} for running a hierarchical randomForest,
  \code{\link{PerformanceHRF}} for assessing the performance and accuracy of
  the HRF.
}

