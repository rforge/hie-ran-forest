% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/PerformanceNewHRF.R
\name{PerformanceNewHRF}
\alias{PerformanceNewHRF}
\title{Predict and assess performance of \code{new.data}, for which the 'true' class
is known.}
\usage{
PerformanceNewHRF(hie.RF, new.data, new.data.case.id = 1,
  new.data.exp.var = NA, new.data.hie, crisp.rule = c("stepwise.majority",
  "multiplicative.m ajority", "multiplicative.permutation"), perm.num = 500,
  div.logical = TRUE, div.print = 25, per.index = c("flat.measures",
  "hie.F.measure"), by.node = TRUE, beta.h.F = 1, ...)
}
\arguments{
\item{hie.RF}{Object of class \code{HRF} - the output of
  \code{RunHRF}.}

\item{new.data}{Data frame containing additional cases that were
  note a part of the original training set.}

\item{new.data.case.id}{Integer, specifying the column number with the
  \code{case.id} in the \code{new.data} data frame. The \code{case.id} values
  should be unique and different from those in the training data.}

\item{new.data.exp.var}{Vector of integers, specifying the columns of
  \code{new.data} that contains the same set of explanatory variables as used
  in the training of \code{hie.RF}. Default is all columns except
  \code{new.data.case.id} and \code{new.data.hie}.}

\item{new.data.hie}{Vector of character or integers, containing the
  names or column numbers of the hierarchical levels in \code{new.data}.
  Order of columns should be from the \code{tree.root} to the terminal nodes.
  If a single column is provided, it should contain only terminal nodes.}

\item{crisp.rule}{The method of selecting a single crisp class from
  the proportion of votes. See details in \code{\link{PerformanceHRF}}.}

\item{perm.num}{Integer, number of random permutations for each
  case if \code{'multiplicative.permutation'} is applied. See details in
  \code{\link{PerformanceHRF}}.}

\item{div.logical}{Logical, if \code{TRUE} progress when
  \code{'multiplicative.permutation'} is applied will be printed every
  \code{div.print} permutations}

\item{div.print}{See above.}

\item{per.index}{The performance and accuracy indices to compute. See
  details in \code{\link{PerformanceHRF}}.}

\item{by.node}{Logical, if \code{TRUE} performances indices will be
  estimated for each terminal node as well as for the overall confusion
  matrix.}

\item{beta.h.F}{Numeric in the range \code{beta.h.F} >= 0. Controls
  weights in the hierarchical F measure index. See \code{\link{HieFMeasure}}
  for details.}

\item{\dots}{Optional parameters to be passed to low level functions.}
}
\value{
A list with the following components:
{\tabular{lll}{
\code{"raw.vote"}               \tab \tab Data frame containing for each
case, the proportion of votes for each node in each local classifier (the
output of \code{\link{predict.HRF}}). \cr

\code{"crisp.case.class"}       \tab \tab Data frame containing the crisp
class for each case based on all options defined by \code{crisp.rule}. The
observed class (terminal node) is given at the last column under
\code{obs.term.node}. \cr

\code{"hie.performance"}        \tab \tab Data frame summarizing all the
performance measures, starting with the overall performance indices and
followed by all the \code{by.node} measures. See details in
\code{\link{PerformanceHRF}}. \cr

\code{"multiplicative.prop"}    \tab \tab Optional data frame with the
multiplicative proportion of votes (the output of
\code{\link{GetMultPropVotes}}). Will be returned if
\code{"multiplicative.majority"} or \code{"multiplicative.permutation"} were
selected.\cr

\code{"nodes.measures.columns"} \tab \tab Optional, if \code{by.node=TRUE},
data frame with three columns including the name of the terminal node, the
performance index and the name of the column in \code{hie.performance} that
holds the output. \cr

\code{"call"}                   \tab \tab The call to function
\code{PerformanceNewHRF}. \cr}}
}
\description{
This function takes as input a \code{new.data} data frame with the same
explanatory variables as those used in \code{hie.RF}. Next, the
\code{\link{predict.HRF}} function is applied to extract the proportion of
votes that each case in \code{new.data} received for each node in each local
classifier of \code{hie.RF}. The function then applies up to three different
methods for selecting a single terminal node (given by \code{crisp.rule} and
described in \code{\link{PerformanceHRF}}). Finally, the performance is
explored in relation to the observed class using various performance measures
(given by \code{per.index} and described in \code{\link{PerformanceHRF}}).
}
\details{
See details on the various \code{crisp.rule}, \code{per.index} and
 on the structure of the output data frames in \code{\link{PerformanceHRF}}.
}
\examples{
# create a random HRF dataset and RunHRF
set.seed(354)
random.hRF <- RandomHRF(num.term.nodes = 20,
                        tree.depth = 4,
                        new.data.observed = TRUE)
train.data <- random.hRF$train.data
new.data   <- random.hRF$new.data
hie.RF.random <- RunHRF(train.data = train.data,
                        case.ID    = "case.ID",
                        hie.levels = c(2:(random.hRF$call$tree.depth + 1)))

# assess performance for the new.data
perf.new.data <- PerformanceNewHRF(hie.RF           = hie.RF.random,
                 new.data         = new.data ,
                 new.data.case.id = 1,
                 new.data.hie     = c(2:(random.hRF$call$tree.depth + 1)),
                 crisp.rule       = c("stepwise.majority",
                                      "multiplicative.majority",
                                      "multiplicative.permutation"),
                 perm.num         = 10,
                 div.print        = 2,
                 per.index        = c("flat.measures", "hie.F.measure"),
                 by.node          = TRUE)

# extract the data
names(perf.new.data)
perf.new.votes      <- perf.new.data$raw.votes
perf.new.crisp      <- perf.new.data$crisp.case.class
perf.new.hie.perf   <- perf.new.data$hie.performance
perf.new.mult.prop  <- perf.new.data$multiplicative.prop
perf.new.nodes.meas <- perf.new.data$nodes.measures.columns
perf.new.call       <- perf.new.data$call
}
\author{
Yoni Gavish <gavishyoni@gmail.com>
}
\seealso{
\code{\link{RunHRF}} for running a hierarchical randomForest analysis,
\code{\link{PredictNewHRF}} for predicting crisp class for each case of
\code{new.data}, \code{\link{PerformanceHRF}} for performance analysis,
\code{\link{HieFMeasure}} for additional information on the hierarchical
performance measures.
}

