% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/RunHRF.R
\name{RunHRF}
\alias{RunHRF}
\title{Run the Hierarchical randomForest on the training data.}
\usage{
RunHRF(train.data, case.ID, hie.levels, internal.end.path = FALSE,
  end.path.name = "END.PATH", root.include = FALSE,
  root.name = "TREE.ROOT", exp.var = NA, mtry = "tuneRF", ntree = 500,
  importance = TRUE, proximity = TRUE, keep.forest = TRUE,
  keep.inbag = TRUE, ...)
}
\arguments{
\item{train.data}{Data frame with the training data.}

\item{case.ID}{A character or integer, specifying the name or
  column number used as case IDs in \code{train.data}. Case ID values must be
  unique.}

\item{hie.levels}{A vector of characters or integers, containing the
  names or column numbers of the hierarchical levels in \code{train.data}.
  Order of columns in \code{train.data} should be from the tree root to the
  terminal nodes.}

\item{internal.end.path}{Logical, \code{FALSE} (default) if all terminal
  nodes are in the lowest level of the class hierarchy. \code{TRUE} if some
  terminal noes are not at the lowest hierarchy level.}

\item{end.path.name}{Character - the factor value used in level \emph{i
  + 1} for terminal nodes ending in level \emph{i}. The only factor in the
  class hierarchy that can appear in more than one hierarchy level.}

\item{root.include}{Logical, \code{TRUE} if \code{root.name} is
  included in \code{hie.levels}.}

\item{root.name}{Character - name to use for the tree root.}

\item{exp.var}{A vector of characters or integers, containing the
  names or column numbers in \code{train.data} with the explanatory
  variables. Default takes all columns other than \code{case.ID} and
  \code{hie.levels}.}

\item{mtry}{Number of variables randomly sampled as candidates
  at each split. Note that the default is to use \code{tuneRF} function of
  \code{randomForest} package for each local classifier. Setting \code{mtry}
  to \code{\link{tuneRF2}} will use a slightly different version of
  \code{tuneRF}.}

\item{ntree}{Number of trees to grow in each local classifier.
  See \code{?randomForest} for additional details.}

\item{importance}{Logical, if \code{TRUE} importance of variables
  will be assessed and saved at each local classifier. See
  \code{?randomForest} for additional details.}

\item{proximity}{Logical, if \code{TRUE}, proximity will be
  calculated for each local classifier. See \code{?randomForest} for
  additional details.}

\item{keep.forest}{Logical, if \code{TRUE} (recommended) the forest of
  each local classifier will be retained. If \code{FALSE}, the predict and
  performance functions will return an error.}

\item{keep.inbag}{Logical, if \code{TRUE} an \emph{n} by \code{ntree}
  matrix be returned that keeps track of which cases are in-bag in which
  trees. \emph{n} being the number of cases in the training set of a local
  classifier.}

\item{\dots}{Optional parameters to be passed to low level functions.}
}
\value{
An object of class \code{"HRF"} that contains the following:
  \item{hier.struc}{A list containing three data frames:
  \describe{
  \item{\code{$lRF.info} - information on each local randomForest, containing
  the following columns:}{}
     {\tabular{lll}{
      \code{"classifier.ID"} \tab \tab The name of the local classifier,
      labelled as C.1, C.2... \cr

      \code{"par.level"}     \tab \tab The level in the class hierarchy of
      the parent node of the local classifier. \cr

      \code{"par.name"}      \tab \tab The name of the parent node in the
      local classifier. \cr

      \code{"par.clas.iD"}   \tab \tab The \code{classifer.ID} in which the
      parent node was classified.  \cr

      \code{"num.sib.tot"}   \tab \tab The number of sibling nodes in the
      local classifier.  \cr

      \code{"num.sib.ter"}   \tab \tab The number of terminal sibling nodes
      in the local classifier.  \cr

      \code{"num.sib.int"}   \tab \tab The number of internal sibling nodes
      in the local classifier.  \cr

       }}
  \item{\code{$nodes.info} - information on each internal or terminal node in
  the class hierarchy, containing the following columns:}{} {\tabular{lll}{

      \code{"node.name"}        \tab \tab The name of the node. \cr

      \code{"node.level"}       \tab \tab  The level of the node in the class
      hierarchy. \cr

      \code{"node.freq"}        \tab \tab  The number of times the node
      appears in the training data. \cr

      \code{"node.par.lev"}     \tab \tab  The level in which the parent of
      the node resides. \cr

      \code{"node.par.name"}    \tab \tab The name of the node's parent node.
      \cr

      \code{"term.int.node"}    \tab \tab If the node is terminal or
      internal. \cr

      \code{"clas.yes.no"}      \tab \tab If the node is the parent node in a
      local classifier. \cr

      \code{"classifier.ID"}    \tab \tab If the node is the parent node in a
      local classifier, the name of the local classifer. \cr

      \code{"classified.in"}    \tab \tab The name of the local classifier in
      which the node is classified. \cr

      \code{"lev.above.clas.in"}\tab \tab The number of levels above the
      node's level in which it is classified. \cr
       }}

  \item{\code{$unique.path} - information on all the unique paths from the
  tree root to each of the terminal nodes. Include two additional columns for
  \code{root.name} and \code{end.path.name}.}{}}}

  \item{train.data.ready}{Data frame containing the training data after
  restructuring to the usable format of \code{RunHRF}}

  \item{case.ID}{Column
  number in \code{train.data.ready} containing the case IDs}
  \item{path.name}{Column number in \code{train.data.ready} containing the
  path names}
  \item{hie.levels}{Column number in \code{train.data.ready} containing the
  hierarchical information}
  \item{exp.var}{Column number in \code{train.data.ready} containing the
  explanatory variables.}
  \item{all.local.RF}{The main large list with all the information on each
  local classifier. For each local classifier, the function returns a list
  consisting of three objects:
  \tabular{lll}{
  \code{local.lRF.info}\tab \tab The information on the local randomForest as
  found in the \code{$hier.struc$lRF.info} data frame. \cr

  \code{local.data}    \tab \tab The Case ID's of all cases that were used as
  training data for the local randomForest. \cr

  \code{local.RF}      \tab \tab an object of class \code{ranomForest} for
  the local classifier. See package randomForest for details. \cr

  }}
  \item{order.local.RF}{data frame containing the order in which local
  randomForests are stored in the \code{all.local.RF} list.}

  \item{call}{the call to function \code{RunHRF}.}
}
\description{
The main function of the package that identifies the hierarchical class
structure from the input training data and runs a \code{randomForest}
algorithm as the local classifier at each internal node that has more than
one child node. Returns an object of class \code{"HRF"} that contains all the
local \code{randomForest} objects along with additional information on the
hierarchical structure.
}
\details{
Implements Breiman's (2001) random forest algorithm based on the
  \code{\link{randomForest}} package for classification. \cr In hierarchical
  randomForest, the additional information on class hierarchy is used to
  train more than 1 local classifier. Each case of a certain terminal node is
  also used as a training case for any internal nodes in the path leading
  from the tree root to the terminal node. For example, in the
  \code{"\link{OliveOilHie}"} dataset (figure below), a training case for the
  terminal class \emph{Apulia.north} is used in local classifier \emph{C.5}
  to separate \emph{Apulia.north} and \emph{Apulia.south}. The same case also
  represent \emph{Apulia} in local classifier \emph{C.4} to separate
  \emph{Apulia} from \emph{Calabria} and \emph{Sicily}. Finally, the same
  case represent \emph{South} in local classifier \emph{C.1}.


\if{html}{\figure{OliveOilClassHie.jpeg}}
\if{latex}{\figure{OliveOilClassHie.jpeg}{options: width=7cm}}
}
\examples{
# create random HRF data
set.seed(354)
random.hRF <- RandomHRF(num.term.nodes = 20, tree.depth = 4)
train.data <- random.hRF$train.data

# Run the Hierarchial randomForest
hie.RF.random <- RunHRF(train.data = train.data,
                        case.ID    = "case.ID",
                        hie.levels = c(2:(random.hRF$call$tree.depth + 1)))

# S3 method for plot -> the class hierarchy
plot(hie.RF.random)

# extracting information
lRF.info         <- hie.RF.random$hier.struc$lRF.info
nodes.info       <- hie.RF.random$hier.struc$nodes.info
unique.path      <- hie.RF.random$hier.struc$unique.path
train.data.ready <- hie.RF.random$train.data.ready
case.ID          <- hie.RF.random$case.ID
path.name        <- hie.RF.random$path.name
hie.levels       <- hie.RF.random$hie.levels
exp.var          <- hie.RF.random$exp.var
all.local.RF     <- hie.RF.random$all.local.RF
order.local.RF   <- hie.RF.random$order.local.RF
fun.call         <- hie.RF.random$call

# extracting the info for local classifier C.2
c.2.local.classifer <- all.local.RF[[order.local.RF[
                         order.local.RF$classifier.ID == "C.2", 2]]]

# structure for each local classifier
# info on the local classifier
c.2.local.lRF.info <- c.2.local.classifer$local.lRF.info
# case.ID that were used to train the randomForest
c.2.local.case.ID  <- c.2.local.classifer$local.data
# object of class randomForest
c.2.local.RF       <- c.2.local.classifer$local.RF
class(c.2.local.RF)

################
# the OliveOIlHie dataset contains terminal nodes at levels 2 and 3
# RunHRF Will return an error if internal.end.path is not set to TRUE

data(OliveOilHie)
# don't run - an error message is returned

# hie.RF.OO <- RunHRF(train.data        = OliveOilHie,
#                     case.ID           = "case.ID",
#                     hie.levels        = c(2:4),
#                     mtry              = "tuneRF2",
#                     internal.end.path = FALSE)

# no error message
hie.RF.OO <- RunHRF(train.data        = OliveOilHie,
                    case.ID           = "case.ID",
                    hie.levels        = c(2:4),
                    mtry              = "tuneRF2",
                    internal.end.path = TRUE)

plot(x = hie.RF.OO, text.size = 9, split.text = 10)
}
\author{
Yoni Gavish <gavishyoni@gmail.com>
}
\references{
Breiman, L. 2001. Random forests. \emph{Machine Learning} 45:5-32.
}
\seealso{
\code{\link{predict.HRF}}    for extracting the proportion of votes,
\code{\link{plot.HRF}}       for plotting the class structure,
\code{\link{ImportanceHie}}  for variable importance,
\code{\link{PerformanceHRF}} for assessing performance and accuracy,
\code{\link{PerformanceFlatRF}} for running an \code{"HRF"} object in a flat
classifier and assessing performance.
}

